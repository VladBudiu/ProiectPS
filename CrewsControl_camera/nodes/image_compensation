#!/usr/bin/env python

import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CompressedImage
from dynamic_reconfigure.server import Server
from CrewsControl_camera.cfg import ImageCompensationParamsConfig

class ImageCompensation():
    def __init__(self):
        self.pub_image_type = "compressed"
        self.clip_hist_percent = rospy.get_param("~camera/extrinsic_camera_calibration/clip_hist_percent", 1.)

        self.is_calibration_mode = rospy.get_param("~is_extrinsic_camera_calibration_mode", False)
        if self.is_calibration_mode == True:
            srv_image_compensation = Server(ImageCompensationParamsConfig, self.cbGetImageCompensationParam)


        self.sub_image_type = "compressed"


        if self.sub_image_type == "compressed":
            self.sub_image_original = rospy.Subscriber('/camera/image_input/compressed', CompressedImage, self.cbImageCompensation, queue_size = 1)

        if self.pub_image_type == "compressed":
            self.pub_image_compensated = rospy.Publisher('/camera/image_output/compressed', CompressedImage, queue_size = 1)

        self.cvBridge = CvBridge()

    def cbGetImageCompensationParam(self, config, level):
        rospy.loginfo("[Image Compensation] Extrinsic Camera Calibration Parameter reconfigured to")
        rospy.loginfo("clip_hist_percent : %f", config.clip_hist_percent)

        self.clip_hist_percent = config.clip_hist_percent

        return config

    def cbImageCompensation(self, msg_img):
        if self.sub_image_type == "compressed":
            np_image_original = np.frombuffer(msg_img.data, np.uint8)
            cv_image_original = cv2.imdecode(np_image_original, cv2.IMREAD_COLOR)

        cv_image_compensated = np.copy(cv_image_original)

        clip_hist_percent = self.clip_hist_percent
        
        hist_size = 256
        min_gray = 0
        max_gray = 0
        alpha = 0
        beta = 0

        gray = cv2.cvtColor(cv_image_compensated, cv2.COLOR_BGR2GRAY)

        if clip_hist_percent == 0.0:
            min_gray, max_gray, _, _ = cv2.minMaxLoc(gray)
        else:
            hist = cv2.calcHist([gray], [0], None, [hist_size], [0, hist_size])

            accumulator = np.cumsum(hist)

            max = accumulator[hist_size - 1]

            clip_hist_percent *= (max / 100.)
            clip_hist_percent /= 2.

            min_gray = 0
            while accumulator[min_gray] < clip_hist_percent:
                min_gray += 1
            
            max_gray = hist_size - 1
            while accumulator[max_gray] >= (max - clip_hist_percent):
                max_gray -= 1

        input_range = max_gray - min_gray

        alpha = (hist_size - 1) / input_range
        beta = -min_gray * alpha

        cv_image_compensated = cv2.convertScaleAbs(cv_image_compensated, -1, alpha, beta)

        if self.pub_image_type == "compressed":
            self.pub_image_compensated.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_compensated, "jpg"))

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('image_compensation')
    node = ImageCompensation()
    node.main()
